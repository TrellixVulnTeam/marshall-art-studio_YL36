<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="API Guides|Product Definition">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Connectors</title>
        <link href="../../../../Resources/TableStyles/Basic Table Type.css" rel="stylesheet" />
        <link href="../../../../Resources/TableStyles/Note Table.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../../../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../Default.htm#Content/API Guide/Product Definitions/Connectors/Connectors.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../API Guide.htm">API Guides</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Product Definitions.htm">Product Definition</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Connectors</span>
        </div>
        <h1>Connectors</h1>
        <p>A service may be either a user written service or a third party service. The use of services is one of the two mechanisms by which custom code is integrated into the application; the other is to simply extend the base classes.</p>
        <p>In general, it makes sense to create a service when each page of the application requires execution of the same "function" when the function has well-defined entry and exit behavior, is very specialized in purpose or involves a call to an interface that is physically external to the servlet container.</p>
        <p>Some common examples of services, or engines, are: business rules, rating (quote) and workflow.</p>
        <p>Each service typically has its own specific interface and set of data requirements, and there needs to be a way to "generically talk to" these services. This mechanism is implemented by the Connector architecture. This architecture is very similar to Java's JSR94 specification for interacting with rules engines (this connector architecture has been extended to actually provide a JSR94 interface, if one is needed).</p>
        <p>Each service requires a connector that acts as the conduit from/to the web application. To create a connector the developer extends the class connector.ConnectorManager.</p>
        <p>At runtime, to know what connectors to execute, the framework looks in the property file for the entry CONNECTOR_CONFIG_FILE, which by default points to a file name .../connectorConfigFile.xml. The connectorConfigFile governs the execution of connectors.</p>
        <p>This file is organized by transaction, and by page within a transaction. Any number of connectors may be executed for a given page. The connector.ConnectorProcessor class will execute each connector present for a page. A hypothetical file is illustrated:</p><pre class="prettyprint"><p>&lt;connectors&gt;
    &lt;transaction id="personalAuto"&gt;
        &lt;page id="generalInfo"&gt; 
            &lt;connector stepId="step1"&gt;
                &lt;connectorManagerClassName&gt;com.yourCo.abc.connector.RuleManager&lt;/connectorManagerClassName&gt;
            &lt;/connector&gt;     
            &lt;connector stepId="step2"&gt;    
                &lt;connectorManagerClassName&gt;com.yourCo.abc.connector.QuoteManager&lt;/connectorManagerClassName&gt;
            &lt;/connector&gt;   
                &lt;connector stepId="step3"&gt;    
                &lt;connectorManagerClassName&gt;com.agencyport.examples.connector.MessageCollectionManager&lt;/connectorManagerClassName&gt;
            &lt;/connector&gt;
        &lt;/page&gt;
    &lt;/transaction&gt;        
&lt;/connectors&gt;</p></pre>
        <p>The above says "for the transaction type personalAuto, on the generalInfo page, run three connectors". Note the last entry - MessageCollectionManager - this class is provided with the framework and may be used, if needed, to "bundle" messages from multiple connectors. </p>
        <h2>How Connectors are Executed</h2>
        <p>Each base processing class (e.g., servlets.base.CMDBaseProcessDataEntry) contains the following code:</p><pre class="prettyprint"><p>initDataBundle();

try {
            
    ConnectorProcessor connectorProcessor = new ConnectorProcessor(dataBundle);
    
    boolean allStepsSucceeded = connectorProcessor.run();                            
    
    if (!allStepsSucceeded) {
        redisplayPageWithMessages();
        return;
    }
}
â€¦</p></pre>
        <table style="width: 100%;mc-table-style: url('../../../../Resources/TableStyles/Note Table.css');" class="TableStyle-Note_Table" cellspacing="0">
            <col class="TableStyle-Note_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Note_Table-Body-Body1">
                    <td class="TableStyle-Note_Table-BodyA-Column1-Body1">
                        <p class="noteheader">NOTE:</p>
                        <p class="note">Any user-written class extending the base classes will also inherit this "hook" to the connectors.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>This code executes after any data from the page has been pre-loaded into the APDataCollection (but not yet persisted to disk).</p>
        <p>The first major item of interest in this code is initDataBundle(). This method is in APCommand. Like the JSR94 interface, this step rounds up all the data that could possibly be of interest to the service and dumps it in a bucket.</p>
        <p>The data bundle is handed to the ConnectorPRocessor (in the constructor) who will then give it to the server when connectorProcess.run() is invoked.</p>
        <table style="width: 100%;mc-table-style: url('../../../../Resources/TableStyles/Note Table.css');" class="TableStyle-Note_Table" cellspacing="0">
            <col class="TableStyle-Note_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Note_Table-Body-Body1">
                    <td class="TableStyle-Note_Table-BodyA-Column1-Body1">
                        <p class="noteheader">NOTE:</p>
                        <p class="note">There is an additional call-back available to connectors, the overridable method executeCustomPrepareDataBundle(), should the connector require anything not already in the data bundle.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>The data bundle is a java.unit.Map containing the following items:</p>
        <table style="width: 100%;mc-table-style: url('../../../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <th style="text-align: left;" class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">KEY</th>
                    <th style="text-align: left;" class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">CONTENTS</th>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">APDATACOLLECTION</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">APDataCollection - data BLOB</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">APSESSION</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">APSession - wrapper around container's HttpSession</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">CONTORL_DATA</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">ControlData - itself a bucket - see below</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">HTTP_SERVLET_REQUEST</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">HttpServletRequest - the container's request object</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1">PAGE</td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">Page - the page, containing all the field elements</td>
                </tr>
            </tbody>
        </table>
        <p>The contents of CONTROL_DATA are:</p>
        <table style="width: 100%;mc-table-style: url('../../../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <th style="text-align: left;" class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">KEY</th>
                    <th style="text-align: left;" class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">CONTENTS</th>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">WORKITEMID</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Integer - the key for this insurance work item</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">TRANSACTION_NAME</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">String - the name of the transaction, from the transaction file</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">PAGE_NAME</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">String - the name of the current page</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">USERID</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Integer - the current user's Id</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1">USERGROUPID</td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">Integer - the group the user belongs to</td>
                </tr>
            </tbody>
        </table>
        <p>The connectorProcessor.run() method iterates over the connectors assigned to a page (via the config file above) and executes them.</p>
        <p>A connector is created by having your class implement the abstract class ConnectorManager. There are only two methods that must be implemented and the second may be empty:</p><pre class="prettyprint"><p>execute(Map dataBundle)

postProcess(Map dataBundle)</p></pre>
        <p>The execute method is where the ConnectorManager does whatever it needs to do to implement the service.</p>
        <p>The base class contains a very important member, which is accessible to the concrete implementer:</p><pre class="prettyprint"><p>protected MessageMap messageMap;</p></pre>
        <p>The messageMap is "automatically tied" to the web application's message area, which is built into the framework; that is, messages added to the message map will be shown to the end user in the browser.</p>
        <p>In simple form, a message is added to the map like this:</p><pre class="prettyprint"><p>messageMap.addMessage(IServiceConstants.MESSAGE_INFO_LITERAL,
    "The requested liability limit exceeds 500,000. " +
    "This application cannot be bound on-line.  An underwriter will contact you shortly.");</p></pre>
        <p>If the connector is one that performs field validation - that is, one that enforces simple data entry rules, such as "zip code must be 5 (or 9) numeric digits" - there is another method available in MessageMap that looks like this:</p><pre class="prettyprint"><p>addFieldRelatedMessage(String type, String fieldId, String resultMessage)</p></pre>
        <p>fieldId is the html field name of the offending field. The framework will automatically highlight this field when re-displaying the page for correction.</p>
        <div class="MCMiniTocBox_0">
            <p class="MiniTOC1_0"><a class="MiniTOC1" href="Connectors In Detail.htm">Connectors In Detail</a>
            </p>
            <p class="MiniTOC1_0"><a class="MiniTOC1" href="Connector Post Processing.htm">Connector Post Processing</a>
            </p>
            <p class="MiniTOC1_0"><a class="MiniTOC1" href="JSR94 Connector Manager.htm">JSR94 Connector Manager</a>
            </p>
        </div>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>