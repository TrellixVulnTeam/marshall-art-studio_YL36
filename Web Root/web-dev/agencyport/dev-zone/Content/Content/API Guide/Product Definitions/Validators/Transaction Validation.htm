<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="API Guides|Product Definition|Validators">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Transaction Validation</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../../../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../Default.htm#Content/API Guide/Product Definitions/Validators/Transaction Validation.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../API Guide.htm">API Guides</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Product Definitions.htm">Product Definition</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="Validators.htm">Validators</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Transaction Validation</span>
        </div>
        <h1>Transaction Validation</h1>
        <p>Transaction validation provides a way to run&#160;SDK based field validations and other compliant connectors against the entire work item. The main output artifact from this feature is the Transaction Validation&#160;Report (TVR). The following three scenarios warrant the execution of a TVR:</p>
        <ul>
            <li value="1">at the point when an uploaded work item is introduced to the application.</li>
            <li value="2">on quote or policy summary pages to ensure the data integrity of the work item.</li>
            <li value="3">when a user has answered a question that now requires data collection from other pages, which had previously been excluded (the corollary of DTR data cleanup).</li>
        </ul>
        <p>The SDK&#160;itself runs a TVR when an upload work item is introduced into the application to determine the data integrity of the incoming stream. An application can also run a TVR itself from custom code. The following is an example of a quote summary page that runs a TVR explicitly:</p><pre class="prettyprint"><p>/**
     * Runs a Transaction Validation Report for this work item. The results of this will dictate whether or not rating should be called. 
     * This also illustrates on how to get all of the correction reports which have been applied to this work item. 
     * @param conn is a database connection.  
     */
    protected void executeCustomReadDataAccess(Connection conn)
            throws APException {
        
        WorkItem workItem = new WorkItem();                     
         WorkItemManager workItemManager = new WorkItemManager(conn);
         
         workItemManager.getWorkItem(workItem, controlData);
        
        APDataCollection apData = (APDataCollection) dataBundle.get(IWebsharedConstants.APDATACOLLECTION);
        
        PolicySummary summary = makePolicySummary(workItem, apData);
        request.setAttribute("APP_POLICY_SUMMARY", summary);
        
         // Run a TVR using the APCommand.runTransactionVerification() wrapper method
         TransactionValidationReport tvr = runTransactionVerification(true, true);
         if ( tvr.isClean() ){
            // The TVR ran clean meaning that the work item is in a good state 
            PremiumCalculator premCalc = new PremiumCalculator(apData);    
            premCalc.calculatePremium();
            System.out.println (premCalc.toString());
            WCRatingResults ratingResults = premCalc.getRatingResults();      
            request.setAttribute("RATING_RESULTS", ratingResults);
         }
         else {
            // The TVR did not run clean so we don't run rating but 
            // dump the errors on to the page 
	    String[] errors = tvr.getAllValidationTextMessages();
            if (errors.length &gt; 0) {
                 request.setAttribute("ERRORS", errors);
            }
         }
    }</p></pre>
        <p>In the above example, the application is using an APCommand wrapper method runTransactionVerification(). Besides the creation of a TVR, this method can adjust the menu display for pages with issues and alter the saved attribute on roster entries to false to make certain roster entries with issues stand out when that roster page is rendered. This is evident by the two boolean arguments that are supplied to this wrapper method. Refer to Java doc for more details.</p>
        <h2>Custom Transaction Validation</h2>
        <p>Both SDK&#160;based field validations and Arc rule based connectors (as in com.agencyport.arcrule.connector.ArcConnector in arcweb.jar and marked as &lt;executeWhen modifiers="ExecuteForPreValidation" /&gt; in the connector configuration file) are engaged when transaction validation runs. A custom connector can also be adapted so that it will be fired during transaction validation as well. The following things need to happen in order to make this to occur:</p>
        <ul>
            <li value="1">Its corresponding connector configuration entry needs to have the modifiers attribute marked with the "ExecuteForPreValidation" value.</li>
            <li value="2">The custom connector needs to implement the com.agencyport.trandef.validation.IPageDataValidator interface.</li>
        </ul>
        <p>The following is a sample of the configuration and source code:</p>
        <p><b>XML</b>
        </p><pre class="prettyprint"><p>&lt;transaction id="quickQuoteWorkersComp"&gt;
        &lt;definitions&gt;
            &lt;namedConnectors&gt;
                &lt;connector name="ArcRuleUnderwritingManager" class="com.agencyport.arcrule.connector.ArcConnector" /&gt;
                &lt;connector name="MessageCollectionManager" class="com.agencyport.examples.connector.MessageCollectionManager" /&gt;
                &lt;connector name="MyCustomConnector" class="test.agencyport.connector.MyValidator" /&gt;            &lt;/namedConnectors&gt;        
            &lt;customActions/&gt;            
            &lt;customModifiers/&gt;
        &lt;/definitions&gt;
    
        &lt;page id="WCGeneralInfo"&gt;
            &lt;connector name="ArcRuleUnderwritingManager"&gt;        
                &lt;executeWhen actions="ContinueSave" /&gt;
                &lt;arcRules ruleSetsFile="workersComp" ruleSet="WCGeneralInfo_underwriting" writeStatistics="true" /&gt;
            &lt;/connector&gt;
            &lt;connector name="MyCustomConnector"&gt;        
                &lt;executeWhen actions="All" modifiers="ExecuteForPreValidation"/&gt;
            &lt;/connector&gt;            &lt;connector name="MessageCollectionManager"&gt;
                &lt;executeWhen actions="All" /&gt;
            &lt;/connector&gt;
        &lt;/page&gt;
&lt;/transaction&gt;</p></pre>
        <p><b>Java</b>
        </p><pre class="prettyprint"><p>/*
 * Created on Jan 10, 2008 by nbaker AgencyPort Insurance Services, Inc.
 */
package test.agencyport.connector;

import java.util.Iterator;
import java.util.Map;

import com.agencyport.connector.ConnectorManager;
import com.agencyport.connector.IConnectorConstants;
import com.agencyport.data.DataManager;
import com.agencyport.data.containers.AggregateDataContainer;
import com.agencyport.data.containers.PageDataContainer;
import com.agencyport.domXML.APDataCollection;
import com.agencyport.html.elements.BaseElement;
import com.agencyport.shared.APException;
import com.agencyport.trandef.provider.CompoundKey;
import com.agencyport.trandef.validation.IPageDataValidator;
import com.agencyport.trandef.validation.TransactionValidationReport;
import com.agencyport.trandef.validation.ValidationResult;
import com.agencyport.trandef.validation.ValidationResults;
import com.agencyport.webshared.HTMLDataContainer;
import com.agencyport.webshared.IWebsharedConstants;

/**
 * The MyValidator class illustrates how a custom connector can be adapted to
 * be engaged by transaction based validation.
 */
public class MyValidator extends ConnectorManager implements IPageDataValidator {

    /** 
     *     This implementation is left out. If you want to see how both execute
     *    and verify methods can leverage the same core logic then look at 
     *    com.agencyport.fieldvalidation.connector.BuiltinFieldValConnectorManager as an example.
     *    Note that this is this method (execute()) is called by prevalidation on the actual display of web page.
     * @see com.agencyport.fieldvalidation.connector.BuiltinFieldValConnectorManager  
     * @see com.agencyport.connector.ConnectorManager#execute(java.util.Map)
     */
    public void execute(Map dataBundle) throws APException {
        HTMLDataContainer htmlDataContainer = 
            (HTMLDataContainer)dataBundle.get(IWebsharedConstants.HTML_DATA_CONTAINER);
        Map fields = htmlDataContainer.getCopyOfFields();
        Iterator fieldsIterator = fields.entrySet().iterator();
        while (fieldsIterator.hasNext()){
            Map.Entry entry = (Map.Entry) fieldsIterator.next();
            String fieldAcordPath = (String) entry.getKey();
            String fieldValue = htmlDataContainer.getStringValue(fieldAcordPath);
            // Get the base element so that we can get its compound key and field label
            BaseElement fieldElement = htmlDataContainer.getAssociatedField(fieldAcordPath);
            // Validate the field value
            String errorTextMessage = validateField(fieldElement, fieldAcordPath, fieldValue); 
            if (errorTextMessage != null ){
                this.messageMap.addMessage(IConnectorConstants.MESSAGE_ERROR_LITERAL,
                        getClass().getName(),
                        getClass().getName(),
                        errorTextMessage);
            }
        }

    }

    /* (non-Javadoc)
     * @see com.agencyport.connector.ConnectorManager#postProcess(java.util.Map)
     */
    public boolean postProcess(Map dataBundle) {
        return true;
    }

    /* (non-Javadoc)
     * @see com.agencyport.trandef.validation.IPageDataValidator#verify(com.agencyport.data.containers.PageDataContainer, com.agencyport.domXML.APDataCollection, com.agencyport.data.DataManager, com.agencyport.trandef.validation.TransactionValidationReport)
     */
    public void verify(PageDataContainer pageDataContainer,
            APDataCollection apData, DataManager dataManager,
            TransactionValidationReport transactionValidationReport) {
        AggregateDataContainer[] aggregateDataContainers = pageDataContainer.getAggregateDataContainers();
        for ( int ij = 0; ij &lt; aggregateDataContainers.length; ij++ ){
            // There is one aggregate data container for a data entry page and 'n'
            // of them for each roster entry on roster pages.
            AggregateDataContainer adc = aggregateDataContainers[ij];
            // Get this aggregate's HTML data container
            HTMLDataContainer htmlDC = adc.getHTMLDataContainer();
            
            // Create a container for this aggregate's validation result instances.
            ValidationResults vRS = new ValidationResults(this, adc); 
            // Validate the data on the data container - it is more probably that
            // custom validators will take specific fields from the data container rather
            // than iterating through the whole data container here below.
            Map fields = htmlDC.getCopyOfFields();
            Iterator fieldsIterator = fields.entrySet().iterator();
            while (fieldsIterator.hasNext()){
                Map.Entry entry = (Map.Entry) fieldsIterator.next();
                String fieldAcordPath = (String) entry.getKey();
                String fieldValue = htmlDC.getStringValue(fieldAcordPath);
                // Get the base element so that we can get its compound key and field label
                BaseElement fieldElement = htmlDC.getAssociatedField(fieldAcordPath);
                // Validate the field value
                String errorTextMessage = validateField(fieldElement, fieldAcordPath, fieldValue); 
                if (errorTextMessage != null ){
                    CompoundKey compoundKeyOfFieldInError = fieldElement.getFieldElementKey();
                    // We only support this validation category and leave the other one up to
                    // the SDK built-in required field validation methods. 
                    int validationCategory = ValidationResult.VALIDATION_CATEGORY_ENTITY_PRESENT_BUT_INCORRECT;
                    vRS.addResult(compoundKeyOfFieldInError, validationCategory, 
                            errorTextMessage, getClass().getName());
                }
            }
            if ( vRS.hasErrors()){
                transactionValidationReport.addResults(vRS);
            } 
        }

    }
    
    /**
     * Validates a field. This implementation is non-sensical.
     * @param fieldElement is the TDF field element.
     * @param fieldAcordPath is the field element id (versus the uniqueId).
     * @param fieldValue is the field value.
     * @return a null if OK else the error message.
     */
    private String validateField(BaseElement fieldElement, String fieldAcordPath, String fieldValue){
        return null;
    }
}</p></pre>
        <div class="MCMiniTocBox_0">
            <p class="MiniTOC1_0"><a class="MiniTOC1" href="Transaction Validation Report (TVR).htm">Transaction Validation Report (TVR)</a>
            </p>
        </div>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>