<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="API Guides">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Request Processing</title>
        <link href="../../../Resources/TableStyles/Example Table.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/Note Table.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/Basic Table Type.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../Default.htm#Content/API Guide/Request Processing/Request Processing.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../API Guide.htm">API Guides</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Request Processing</span>
        </div>
        <h1>Request Processing</h1>
        <p>The purpose of the request processing component is to:</p>
        <ul>
            <li value="1">provide a mechanism to support a standard sequence of controlling tasks required to display and process a series of different "types"&#160;of HTML&#160;pages that, together, make up the web application "transaction."</li>
            <li value="2">provide a mechanism to support customizations to the standard sequence of controlling tasks required to display and process a series of HTML pages.</li>
        </ul>
        <h2>Page Processing</h2>
        <p>The typical web transaction presents a number of pages that generally fall into only three simple categories of page layouts:</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" style="width: 253px;" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Basic Data Entry (for non repeating data)</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">contains standard HTML&#160;field elements.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Roster (a list for repeating data)</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">
                        <p>A roster form is used to capture repeating data (e.g., risk locations or loss history). The top part of the form contains the roster of previously entered items. The data displayed in the roster section is generally some "key" fields from the item; below the roster is a section for adding a new item.</p>
                    </td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1" style="font-weight: bold;">Summary (display only)</td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">A summary page is something like a "quote results"&#160;page or a page displaying the submitted application in a display only format.</td>
                </tr>
            </tbody>
        </table>
        <h2>Displaying and Processing HTML Form Layouts</h2>
        <p>Based on the type of HTML form to process, a series of processing tasks must take place in a well-defined order. To ensure consistency of, and accuracy in, processing these tasks, a collection of processing commands are pre-defined.</p>
        <p>These commands contain all the logic to completely process the display and process side of a series of web pages that make up a transaction. Many of the individual processing tasks need to happen during both the display and processing logic of page processing. Also, many of the helper objects required on the display side of page processing are required on the process side of page processing logic.</p>
        <p>This combination of common objects and common processing tasks lead to the creation of a base APCommand object. A catalogue of processing commands that inherit from APCommand are available to handle the processing of the various layouts mentioned above.</p>
        <h2>Supporting a Standard Sequence of Controlling Tasks</h2>
        <p>APCommand is the base command class that contains all of the common methods required by both the display side and process side logic. APCOmmand also contains references to all of the common objects required for processing. The APCommand class is an abstract class containing the abstract method process().</p><pre class="prettyprint"><p>abstract public void process() throws ServletException, IOException;</p></pre>
        <p>The framework comes with a number of lasses that extend APCommand and automatically process the standard page layouts. These classes implement the process()&#160;method. These are referred to as the base processing commands (or base processing classes).</p>
        <h2>Framework Base Processing Commands</h2>
        <p>The following is the list of classes that extend APCommand:</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayDataEntry</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Display a basic data entry page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessDataEntry</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process a basic data entry page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayFTDE</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">For the very first page of the transaction, which has special needs (FTDE is FIrst Time Data Entry).</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessFTDE</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the very first page of transactions.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayRoster</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Display a roster page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessRoster</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the added item on a roster page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayRosterEdit</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Display the editing page for a roster line item.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessRosterEdit</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the edit action for a roster line item.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessRosterDelete</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the delete action for a roster line item.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessRosterRecover</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the recover action for a roster line item (policy change transaction only).</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayPage</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Display a display only/summary type HTML&#160;page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessPage</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process a display only/summary type HTML&#160;page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayPDF</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Display a PDF&#160;document (e.g., an ACORD 130 form).</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseDisplayFile</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Display an uploaded file (e.g., a loss run worksheet).</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseLaunchPASRequest</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Launch point for policy change based requests.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessApplyDefaults</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the Apply Defaults action.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessConvertToApplication</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the Convert to application action.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessDeleteDefaults</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the Delete defaults item action.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CMDBaseProcessRenameDefaults</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Process the Rename defaults item action</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1" style="font-weight: bold;">CMDBaseProcessSaveToDefaults</td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">Process the Save to defaults action.</td>
                </tr>
            </tbody>
        </table>
        <p>If the page has special processing need(s) that is not satisfied by the base command class, the developer subclasses the appropriate base processing command (not the APCommand) and adds the code to process the special need.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">public class CMDProcessEquipment extends CMDBaseProcessDataEntry {</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>A mechanism termed the front controller pattern dynamically invokes the base processing class (or the developer written subclass).</p>
        <h2>Front Controller Pattern</h2>
        <p>AgencyPortal software implements a front controller pattern.</p>
        <p>The front controller pattern centralizes request logic by presenting a single point of entry for the web application. A front controller typically consists of a request handler and a catalog of dynamically invoked commands that process the web request.</p>
        <p>A series of well-known request parameters determines which cataloged command to invoke.</p>
        <p>The following URL&#160;example is used to help illustrate the concept of the front controller pattern:</p><pre class="prettyprint"><p>http://FrontServlet?TRANSACTION_NAME=workerscomp&amp;PAGE_NAME=generalInfo&amp;METHOD=Display&amp;FIRST_TIME=true"</p></pre>
        <p>The front controller pattern specifies a single point for a web server to interface with a web application. In the example URL, that single entry point is the FrontServlet.FrontServlet extends javax.servlet.http.HttpServlet.</p>
        <p>The FrontServlet uses a helper class, servlets.base.RequestHelper, to determine the command class to handle the web request. The RequestHelper uses values from the request parameters to build a fully qualified Java class name.</p>
        <p>The class name is mapped to one of the base command class names or to a subclass if the page has special processing needs. The FrontServlet instantiates the resolved Java class name and calls the command's process() method.</p>
        <p>The following is a snippet of a TDF:</p><pre class="prettyprint"><p>&lt;page id="generalInfo" title="General Information" type="dataEntry"&gt;
	&lt;pageElement type="fieldset" legend="Mailing Address"&gt;
		&lt;fieldElement type="text" id="Insured.Party.Addr.Addr1" label="Address" required="true" help="" 
		&lt;fieldElement type="text" id="Insured.Party.Addr.Addr2" label="Address Line 2" required="false" 
		&lt;fieldElement type="text" id="Insured.Party.Addr.City" label="City" required="true" help="" size="20"	
		&lt;fieldElement type="selectlist" id="Insured.Party.Addr.StateProvCd" label="State" required="true" 
			&lt;optionList reader="xmlreader" source="codeListRef.xml" target="selectOne"/&gt;
			&lt;optionList reader="xmlreader" source="codeListRef.xml" target="state"/&gt;
			&lt;/fieldElement&gt;
			&lt;fieldElement type="text" id="Insured.Party.Addr.PostalCode" label="Zip Code" required="true" 
	&lt;/pageElement&gt;
	&lt;pageElement type="fieldset" legend="Coverage Information"&gt;
		&lt;fieldElement type="selectlist" id="WCLineBusiness.Cov.Limit.Amt" label="Employers Liability Limit"
			&lt;optionList reader="xmlreader" source="codeListRef.xml" target="employersLiabilityLimit"/&gt;
		&lt;/fieldElement&gt;
	&lt;/pageElement&gt;
&lt;/page&gt;</p></pre>
        <p>To display and process this page, the developer needs to:</p>
        <ul>
            <li value="1">determine the type of page to display or process to determine which base command classes to use.</li>
            <li value="2">determine whether the base display and process command classes are sufficient to display and process the page. If not, the developer subclasses the appropriate base commands.</li>
            <li value="3">set up the correct configuration in the properties file.</li>
        </ul>
        <p>If special processing is not required to display and process the page, the default base processing classes are used at runtime to process the page. The developer does not have to write any Java code. The only task to perform is configuration.</p>
        <p>Specify where the transaction definition entries in the properties file are and the entries of interest when configuring command classes.file is located:</p><pre class="prettyprint"><p>transaction_definition_files_directory=C:\\myDrive\\properties\\</p></pre>
        <p>Specify the file name for the transaction:</p><pre class="prettyprint"><p>transaction_definition_files=workerscomp=workerscomp.xml</p></pre>
        <p>Specify the prefix of the command class name:</p><pre class="prettyprint"><p>workerscomp.root_command_class_name=com.agencyport.servlets.wc.CMD</p></pre>
        <h2>How the System Determines the Class Names</h2>
        <p>Using information in the transaction file, information contained in the HTTP request and information in the properties file, the framework (class RequestHelper) determines the class name to instantiate (serve the request). This class name is referred to as the processing class name. The specific information is as follows:</p>
        <p>Take the value of the request parameter TRANSACTION_NAME.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">TRANSACTION_NAME=wc</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>And append the constant root_command_class_name to find a properties file entry.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">wc.root_command_class_name=com.agencyport.servlets.wc.CMD</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>The value from that properties file entry is: com.agencyport.servlets.examples.CMD.</p>
        <p>The value is pre-pended to the value of the request parameter METHOD. The valid values for this parameter is Display or Process.</p>
        <p>So far, the processing class name is:</p><pre class="prettyprint"><p>com.agencyport.servlets.examples.CMD.Display</p></pre>
        <p>Next, the value of the request parameter PAGE_NAME is appended to the class name. The value of the PAGE_NAME request parameter is derrived from the attribute id, from the page element, in the transaction file.</p><pre class="prettyprint"><p>&lt;page id="generalInfo" title="General Information" type="dataEntry"&gt;</p></pre>
        <p>Now, the processing class name becomes:</p><pre class="prettyprint"><p>com.agencyport.servlets.examples.CMD.DisplaygeneralInfo</p></pre>
        <p>Lastly, two optional request parameters are interrogated for values. Those parameters are FIRST_TIME and EDIT. If these attributes are present and set to true, the values of FirstTime and Edit are appended to the class name.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">com.agencyport.servlets.examples.CMD.DisplaygeneralInfoFirstTime</p></pre>
                        <p class="example">or</p><pre class="prettyprint"><p class="example">com.agencyport.servlets.examples.CMD.DisplaygeneralInfoEdit</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>The last step performed by the RequestHelper is to determine whether a base class is going to process the request or if there is a subclass to handle the request since the page requires special processing.</p>
        <p>This determination is accomplished by a lookup into the properties file for an entry matching the processing class name.</p>
        <p>If an entry is found, the processing class name is mapped to the name of the base class that can handle the page. if no entry is found, the request cannot be handled by a base class and the processing class name is the name of a developer written subclass.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Note Table.css');" class="TableStyle-Note_Table" cellspacing="0">
            <col class="TableStyle-Note_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Note_Table-Body-Body1">
                    <td class="TableStyle-Note_Table-BodyA-Column1-Body1">
                        <p class="noteheader">NOTE:</p>
                        <p class="note">This is somewhat counter-intuitive at first, but has to be done in this matter, not the converse.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p>
                        <p class="example">An example properties file entry is:</p><pre class="prettyprint"><p class="example">com.agencyport.servlets.wc.CMDDisplaygeneralInfo=com.agencyport.servlets.base.CMDBaseDisplayDataEntry</p></pre>
                        <p class="example">This entry says, "the page represented by the name CMDDisplaygeneralInfo can be processed by the base command CMDBaseDisplayDataEntry."</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Customizing the Standard Sequence of Processing Tasks</h2>
        <p>Many times, there is a need to customize the default behavior of a command task. During execution of the default set of controlling tasks, it may be necessary to "get a hook into" the controlling task to, for example, manipulate data before the standard task runs, short circuit the standard controlling task, etc.</p>
        <p>Supporting this type of customization is accounted for by having the standard tasks "call out" to stub methods. The default implementation of stub methods is to simply return (doing nothing). To add customizations, a developer overrides the base command class and implements an overridden version of the stub method, providing the specific customizations required.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p>
                        <p class="example">Suppose that whenever data from a certain page is updated, some special data handling logic is required.</p>
                        <p class="example">The following is the section in the CMDBaseProcessDataEntry class where the data update logic is initiated:</p><pre class="prettyprint"><p class="example">try {
 

executeUpdateDataAccess(dataAccessType);
 

}
 

catch (APException apex) {

logger.severe("executeDataAccess call caused exception ==&gt; " + apex.getMessage());

displayApplicationErrorPage(apex, IServletsSecurityConstants.LOGON_URL);

return;

}</p></pre>
                        <p class="example">The executeUpdateAccess() method is found in the APCommand superclass. This method controls updating the data store with the data that came in from the page.</p>
                        <p class="example">In APCommand, a line that looks like the following is located in the executeUpdateDataAccess() method:</p><pre class="prettyprint"><p class="example">try {

executeCustomUpdateDataAccess(dataAccessType, conn);

…

}

catch …</p></pre>
                        <p class="example">This method is the "hook" to add special logic.</p>
                        <p class="example">The executeCustomUpdateAccess() method in APCommand does nothing, and looks like the following:</p><pre class="prettyprint"><p class="example">protected void executeCustomUpdateDataAccess(int dataAccessType, Connection conn) throws APException {

}</p></pre>
                        <p class="example">This illustrates the mechanism for adding special logic: APCommand is "calling itself," invoking a method that does nothing.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>When APCommand is subclassed when CMDBaseProcessDataEntry (for example) is subclassed, the method is invoked at runtime instead of the empty superclass method if the executeCustomUpdateDataAcess() method, which contains the required special logic, is put in the subclass.</p>
        <p>The following is a list of methods that are intended to be overridden:</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>initCustomControlData</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">This method is available to programmatically update the control data object.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>determineFinalMenuDisposition</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">This method is available to programmatically suppress the display of the menu on the HTML&#160;page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">String <b>determineNextPage</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Determine the next page to display based on the value of the NEXT button.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>executeCustomDataStaging</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">
                        <p>This method is available to perform any manipulation of the data before regular processing begins. It is invoked from executeDataStaging() before the APDataCollection is updated by framework. Typical types of logic:</p>
                        <ul>
                            <li value="1">Index manager initialization for add roster scenarios for repeaters within repeaters</li>
                            <li value="2">Hold on to current aggregate references for roster edit/delete scenarios</li>
                        </ul>
                    </td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>executeCustomPostDataStaging</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">
                        <p>Invoked from executeDataStaging() after APDataCollection is updated by the framework, but before any connectors are executed.</p>
                        <p>Includes custom updates of APDataCollection from special fields, etc.</p>
                    </td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>executeCustomInitHTMLDataContainer</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">This method is available to post process the data in the HTMLDataContainer (e.g., you may need to massage date information before database insertion).</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>executeCustomPrepareDataBundle</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">During the execution of the ConnectorProcess.run() method, the code is in a loop, calling each registered connector's execute method. Right before that executive call, this method is called. It is an opportunity to add any data required for the connector.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>executeCustomReadDataAccess</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">This method is available to add custom reads from the database. invoked from executeReadDataAccess() after the default page initialization has taken place.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">void <b>executeCustomUpdateDataAccess</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">This method is available to add custom updates to the database. Invoked from executeUpdateDataAccess() before the APDataCollection is persisted and all connectors have been executed. Updates to axillary databases or other persistent formats.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1">void <b>executeCustomUpdateMenuController</b>()</td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">This method is available to add custom updates to the menu tracking data and invoked from updateMenuController() before the APCommand base class updates the current page's menu status.</td>
                </tr>
            </tbody>
        </table>
        <p>Naming a subclass name must follow the naming conventions for processing a class name. </p>
        <p>The package name for the class is:</p>
        <p><code>com.agencyport.servlets.wc</code>
        </p>
        <p>And the algorithm for the class name is:</p>
        <p><code>Display or Process key word,</code>
        </p>
        <p>Plus</p>
        <p><code>page name as found in the transaction definition file,</code>
        </p>
        <p>Plus (optionally)</p>
        <p><code>the keyword Edit, FirstTime, or Delete</code>
        </p>
        <p>Since the subclass itself must be run, there is not any entry for it in the properties file; recall entries in the properties file tell which base class to run for a given processing class name.</p>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>