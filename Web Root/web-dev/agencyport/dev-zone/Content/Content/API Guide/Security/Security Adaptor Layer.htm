<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="API Guides|Security">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Security Adaptor Layer</title>
        <link href="../../../Resources/TableStyles/Example Table.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../Default.htm#Content/API Guide/Security/Security Adaptor Layer.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../API Guide.htm">API Guides</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="Security.htm">Security</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Security Adaptor Layer</span>
        </div>
        <h1>Security Adaptor Layer</h1>
        <p>The security adaptor layer is the bridge or translation layer between the ACSI abstraction layer and the physical back end security provider/model. This is the realm that application teams tend to concentrate on more than others. The following are the main interfaces that migrating application teams need to consider:</p>
        <ul>
            <li value="1"><b>Security Filter</b> - ACSI comes with an almost 100% complete security filter implementation. It evaluates HTTP requests to ensure the request is originating from an authenticated user. It verifies that the user is authorized for both the action requested and the data item that the action acts upon.</li>
            <li value="2"><b>ISecureResource</b> - the standard interface used by the security filter to verify authorization assertions for incoming HTTP requests. Part of a secure resource's responsibility is to determine whether the incoming HTTP&#160;request is recognized by the secure resource implementation. If it recognizes the request as one it can "understand," then it responds with a true to the following method:
				<br /><pre class="prettyprint"><p>boolean recognizesRequest(HttpServletRequest request, ISecurityProfile securityProfile) throws SecurityException;</p></pre><br />After a particular secure resource implementation recognizes the inbound request, it is then called upon to serve up the roles and/or permissions necessary to exercise said function. It is also called upon to parse the data item's identity (a.k.a, work item id) from the request. The following interface methods are the methods that provide this functionality:
				<br /><pre class="prettyprint"><p>Set&lt;IRole&gt; getValidRolesNeededForExecutingRequest(HttpServletRequest recognizedRequest, ISecurityProfile securityProfile) throws SecurityException;
Set&lt;IPermission&gt; getPermissionsNeededForExecutingRequest(HttpServletRequest recognizedRequest, ISecurityProfile securityProfile) throws SecurityException;
Id getDataItemIdAssociatedWithRequest(HttpServletRequest recognizedRequest, ISecurityProfile securityProfile) throws SecurityException;				</p></pre><br />Applications will probably need more than one secure resource implementation to satisfy the various end points of an application. AgencyPortal comes with two basic security resource implementations that you can use as is or extend for modification.&#160;Each secure resource must have its own factory. Accordingly, each factory is registered in application properties under the following name:
				<br /><pre class="prettyprint"><p>secure_resource_factories=com.agencyport.secure.menu.provider.SecureMenuFactory;\
com.agencyport.secure.front.SecureFrontControllerFactory</p></pre><br />AgencyPortal's own SecureMenuFactory is responsible for the instantiation of the secure resource, which is responsible for verifying menu selections on the main menu bar against the current user's security profile. The underlying metadata for the menu is driven from the menu and menumember tables that all applications are free to add additional menu items. The visual manifestation menu is rendered by menu/menu.jsp.
				<br /><p style="font-weight: bold;font-style: normal;color: #ff0000;">[NEED 5.0 SCREEN&#160;SHOT]</p><br />&gt;For each menu selection to display, a corresponding permission must be contained in the security profile of the current user. From a security filtering standpoint, if a user does not have the security permission to only see the Home and My Work menu options, but attempts to URL&#160;spoof the Toolkit function, the following security exception will result:
				<br /><b style="color: #ff0000;">[NEED&#160;5.0 SCREEN&#160;SHOT]</b><br />An audit record is also posted that documents what user attempting something that was against the law:
				<br /><code>26    front_door_access_tracking    1000    subjectId    Great Salesman    access    0    0    urlId    http://localhost:8080/pompey/Toolkit    903    permissionId    Access Toolkit Menu    2009-05-27 10:46:15.237    200    Example Agency    Subject has not been granted the following permissions: Access Toolkit Menu</code><br />The other build-in secure resource verifies incoming FrontServlet requests to ensure:
				<br />the current user is authorized for the LOB&#160;(indirectly via the transaction name) in context
				<br />the current user is authorized to see the work item in context
				<br />If a user attempts to URL&#160;spoof a work item they are not authorized to view, the following exception displays:
			<br /><span style="color: #ff0000; font-weight: bold;">[NEED&#160;5.0 SCREEN&#160;SHOT]</span></li>
            <li value="3"><b>ISecurityProfile</b> - every application is required to provide a security profile that, in turn, holds onto the security model for every authenticated user logged into the system. This is the standard interface for this function; it acts as the container for the security model for the authenticated logged in user and standardizes how the security model for the current user is exposed to the outside world. It acts as the provider of secure resources to the security filter via the getSecureResources() method. It also responds to functionality authorization and data access authorization requests from the security filter as pertaining to the following security profile methods:
				<br /><pre class="prettyprint"><p>void checkIsInOneOfRoles(Set&lt;IRole&gt; roles) throws RoleCheckFailedException;
void checkPermissions(Set&lt;IPermission&gt; permissions) throws PermissionsDeniedException;</p></pre><br />The security profile class name is configured in application properties under the security.profile_classname name.
				<br /><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0"><col class="TableStyle-Example_Table-Column-Column1" /><tbody><tr class="TableStyle-Example_Table-Body-Body1"><td class="TableStyle-Example_Table-BodyA-Column1-Body1"><p class="exampleheader">EXAMPLE:</p><p class="example"><pre class="prettyprint">security.profile_classname=com.agencyport.security.profile.builtin.PortalSecurityProfile</pre></p></td></tr></tbody></table></li>
            <li value="4"><b>ISecurityProfileManager</b> is the interface that is responsible for parsing the HTTP request, authenticating the user's credentials as represented in the HTTP request and acting as the primary agent for creation and initialization of the security profile instances. It interacts internally with the security provider for access to the back end security model for the purposes of building the security model into the security profile for the current authenticated user. The security profile manager also acts as the factory for the underlying security profile.</li>
        </ul>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>