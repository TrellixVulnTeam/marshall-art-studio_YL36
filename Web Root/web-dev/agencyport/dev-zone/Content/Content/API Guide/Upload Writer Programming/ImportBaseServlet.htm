<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="API Guides|Upload Writer Programming">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>ImportBaseServlet and UploadDataManager</title>
        <link href="../../../Resources/TableStyles/Note Table.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../Default.htm#Content/API Guide/Upload Writer Programming/ImportBaseServlet.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../API Guide.htm">API Guides</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="Effective Upload Writer Programming.htm">Upload Writer Programming</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">ImportBaseServlet and UploadDataManager</span>
        </div>
        <h1>ImportBaseServlet and UploadDataManager</h1>
        <p>The ImportBaseServlet and Upload Data Manager classes include protected hook points to accommodate application customizations. The following methods are included to help achieve reusability and extensibility. It is important that an upload writer developer reviews these methods  to maximize the reusability of framework logic, reduce the amount of replicated framework logic and minimize the amount of custom code.</p>
        <h2>ImportBaseServlet</h2>
        <p>ImportBaseServlet includes the following methods:</p>
        <ul>
            <li value="1"><b style="font-style: italic;">writeResponse</b> - hook point that provides the application a last chance for altering the response that is delivered back to the client via the step data structure. This is the place where the application can assemble the response step data structure, which may include an XML response as part of the //AgencyConnectConversionStep/OutputStream. The default implementation invokes the writeAPDataToDebugOUtput(), which may or may not do anything of note, and then invokes the writeSuccessMessage() methods.</li>
            <li value="2"><b style="font-style: italic;">determineWorkItemOwnership</b> - hook for sub classes to do something specific about the work item ownership. The default implementation assumes that the owner of the work item is the current subject and that the owning group is the primary user group of the current subject.</li>
            <li value="3"><i style="font-weight: bold;">convertACORDStandardToACORDSimplified</i> - hook point for converting the ACORD&#160;standard document to its ACORD&#160;simplified version. The default implementation will carry out any transformation that is a registered product artifact <span style="color: #ff0000;">of type transformer supporting the ACORD&#160;standard to simplified direction</span>.
        <br />The following is an example:
<br /><pre class="prettyprint">&lt;transformer name="ACORD standard to AP WC Simplfied ACORD " type="aggregator" targetFormat="ACORDSimplified"
lob="WORK"&gt;
			&lt;step name="WC Transformation target - ACORD Standard Step 1" type="java"
className="com.agencyport.workerscomp.transformers.WorkersCompTransformer" /&gt; 
			&lt;/transformer&gt;</pre></li>
            <li value="4"><b style="font-style: italic;">convertACORDSimplifiedToACORDStandard</b> - hook point for converting the ACORD&#160;simplified document back to its ACORD&#160;standard version (reverse transformation). The default implementation will carry out any transformation that is a registered product artifact <span style="color: #ff0000;">of type transformer supporting the ACORD&#160;simplified to standard direction</span>.
        <br />The following is an example:
<br /><pre class="prettyprint">		&lt;transformer name="AP WC Simplfied ACORD to ACORD standard" type="aggregator" targetFormat="ACORDStandard"
lob="WORK"&gt;
				&lt;step name="WC Transformation target - ACORD Standard Step 1" type="java"
className="com.agencyport.workerscomp.transformers.WorkersCompTransformer" /&gt;
				&lt;step name="Shared Standard Built-in Transformations" type="link" linkedTo="builtin-standardizations" /&gt;
			&lt;/transformer&gt;</pre></li>
            <li value="5"><i style="font-weight: bold;">writeAPDataToDebugOutput</i> - handy debug function that writes out all document views currently under management by the data collection to the file system, each as its own XML output file. This method reads an application property <i style="font-weight: bold;">debug_upload_transformations_dump_path</i>, which dictates the output directory to which the XML&#160;files are written to; one for each document view. The pattern for the file name derivation for each document view follows the following pattern:
        <br />${application property:APPLICATION_NAME}_${work item id}_${<b>APDataCollection</b>.<i>getViewTypeDescription()</i>}_writeResponse.xml
        <br />If this property is missing, then this method does nothing. Enabling this method should be restricted to debugging purposes only.
        <br /><img src="../../../Resources/Images/uploadtransformations_641x183.png" style="width: 641;height: 183;" /></li>
            <li value="6"><b style="font-style: italic;">createAndRunUploadDataManager</b> - creates and runs an upload data manager. The default implementation invokes the <i>createUploadDataManager()</i> method and then invokes its <i>updateInputDataCollectionInPlace()</i> method.</li>
            <li value="7"><i style="font-weight: bold;">createUploadDataManager</i> - factory method for the upload data manager instance. Applications that extend the <b>UploadDataManager</b> class must override this method for their subclass to get instantiated. The default implementation creates the standard <b>UploadDataManager</b> class.</li>
            <li value="8"><b style="text-decoration: none; font-style: italic;">executeCustomAlterPostUploadDataManagement</b> - the custom handler for altering the XML&#160;after upload data management has finished. Called by the base <i>customAlterImportData()</i> method after calling the com.agencyport.upload.UploadDataManager.updateInputDataCollectionInPlae (Transaction, boolean, boolean, int) call.</li>
        </ul>
        <h2>UploadDataManager</h2>
        <p>UploadDataManager includes the following methods:</p>
        <ul>
            <li value="1"><b style="font-style: italic;">establishPreConditions</b> - sets up the preconditions for the upload request.</li>
            <li value="2"><b style="font-style: italic;">createOutputDataCollection</b> - the factory method for creating and initializing the initial empty output data collection. The default implementation does the following:<ul style="list-style-type: circle;"><li value="1">creates an empty output data collection sharing the same name as the input data collection.</li><li value="2">sets up the original document on the output data collection via the method <code>getOriginalDocumentInPrepForTDFBasedDataTransfer (Transaction, boolean)</code>.</li><li value="3">copes the last UID value from the input data collection onto the output data collection</li></ul></li>
            <li value="3"><i style="font-weight: bold;">getOriginalDocumentInPrepForTDFBasedDataTransfer</i> - typically called from <code>createOutputDataCollection (Transaction, boolean)</code> to ascertain which document is considered the original document to use during the TDF based data transfer. The main function of this original document is for id attribute retention purposes. The document returned by this method becomes the original view document on the output data collection during the TDF&#160;based data transfer.
        <br /><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Note Table.css');" class="TableStyle-Note_Table" cellspacing="0"><col class="TableStyle-Note_Table-Column-Column1" /><tbody><tr class="TableStyle-Note_Table-Body-Body1"><td class="TableStyle-Note_Table-BodyA-Column1-Body1"><p class="noteheader">NOTE:</p><p class="note">If id retention is a requirement, then an original document is necessary to install on the output data collection; otherwise, the id retention algorithm will not be complete or effective.</p></td></tr></tbody></table></li>
            <li value="4"><b style="font-style: italic;">executePreDataTransfer</b> - responsible for executing the processing immediately before the TDF based data transfer is carried out. The default implementation executes the following:<ul style="list-style-type: circle;"><li value="1">runs a basic referential operation to delete any aggregates with id references that are invalid via the <code>executePreDataTransferReferentialIntegrity()</code> method.</li><li value="2">nulls out the original document on the input document to cut down on the original values processing overhead during the read side of the TDF data transfer process.</li><li value="3">sets up the id retention framework, depending on the <code>retainIdAttributes </code>parameter.</li></ul></li>
            <li value="5"><b style="font-style: italic;">executePreDataTransferReferentialIntegrity</b> - runs referential integrity against the input data collection. The default implement removes any id references from aggregates that cannot be resolved. Under the overs, the <b style="font-style: italic;">com.agencyport.domXML.refintegrity.BasicReferentialIntegrityManager</b> class handles the default referential integrity work.</li>
            <li value="6"><b style="font-style: italic;">executeDataTransfer</b> - contains the main data transfer processor taking the input data collection and building the output data collection using the fields in the TDF as the basis for determining the fields to copy from the input data collection to the output.</li>
            <li value="7"><i>executePostDataTransfer</i> - processes immediately after the TDF based data transfer. the default implementation:<ul style="list-style-type: circle;"><li value="1">clears any index management state via <code>com.agencyport.data.IndexManager.clear()</code> and runs any registered referential integrity operations via <code>com.agencyport.data.DataManager.maintainReferntialIntegrity(int)</code>.</li><li value="2">restores any previous field access and id preserver handlers on the input and output data collections.</li><li value="3">fills out any id attribute values on any remaining elements on the output data collection that were not filled in during the TDF based data transfer.</li></ul><ul style="list-style-type: circle;"><li value="1">initializes the original document of record on the output document via the <code>getOriginalDocumentSystemOfRecord (Transaction, APDataCollection)</code> method.</li></ul></li>
            <li value="8"><b style="font-style: italic;">executePostDataTransferReferentialIntegrity</b> - runs referential integrity against the output document.</li>
            <li value="9"><i style="font-weight: bold;">getOriginalDocumentSystemOfRecord</i> - typically called from <code>executePostDataTranser (APDataCollection, Transaction, boolean)</code> to ascertain which document should be considered the original document of record that will eventually be persisted to the xmlstore.original_amlstring column for this work item. The default implementation will be governed by a transaction/LOB/application level property whose base property name is <code>ORIGINAL_DOCUMENT_SYSTEM_OF_RECORD_BASE_PROPERTY_NAME</code>. There are two values that the framework understands for this property:<ul style="list-style-type: circle;"><li value="1"><code>ORIGINAL_DOCUMENT_SYSTEM_OF_RECORD_FRONT_DOOR_DOCUMENT_VALUE</code></li><li value="2"><code>ORIGINAL_DOCUMENT_SYSTEM_OF_RECORD_CURRENT_DOCUMENT_BEFORE_DATA_CORRECTIONS_VALUE </code></li></ul><br />This property is only active if the <code>com.agencyport.trandef.Transaction.supportsOriginalValue()</code> method for the current upload request returns a value of <code>true </code>and the <code>retainIdAttributes </code>parameter is set to true.</li>
            <li value="10"><i style="font-weight: bold;">verifyDataCollection</i> - verifies that a data collection contains no elements with the same id attribute value.</li>
        </ul>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>