<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Getting Started">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Framework Details</title>
        <link href="../../Resources/TableStyles/Example Table.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/Note Table.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../Default.htm#Content/Getting Started/Framework Details.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="Getting Started.htm">Getting Started</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Framework Details</span>
        </div>
        <h1>Framework Details</h1>
        <h2>Boot Time Initialization</h2>
        <p>When the J2EE application server hosting AgencyPortal starts up, several standard framework services/subsystems, as well as any custom services/subsystems, must be initialized.</p>
        <p>The J2EE web.xml file for the framework specifies that at startup, the servlet InitializerServlet should be invoked. Additionally, it specifies for the InitializerServlet where the framework's properties file is located.</p>
        <p>At server startup, the InitializerServlet reads the properties file. In doing so, it also provides a mechanism for all other servers to also "get a handle to" the properties file.</p>
        <p>The InitializerServlet then invokes a method in the BootServiceDriver class called bootSubSystems().</p>
        <p>This method reads the list of classes (that must implement IBootServiceIntf), found in the properties file named by property boot_service_providers and, using reflection, instantiates each class in turn and calls its init()method. After each service is instantiated, the service reports back success or failure to the BootServiceDriver. The BootServiceDriver keeps track of the overall success or failure of all services. After the application is active, users can log on.</p>
        <h2>Post Logon</h2>
        <p>Typically, after the user is logged on, they are directed to a page generated by the JSP <i>home.jsp</i>. home.jsp is included with AgencyPortal for reference, but this JSP is expected to be customized.</p>
        <p>On home.jsp, you can find a URL&#160;that looks like the following:</p>
        <p><code>"FrontServlet?TRANSACTION_NAME=wcomp&amp;PAGE_NAME=genInfo&amp;METHOD=Display&amp;FIRST_TIME=true"</code>
        </p>
        <p><i>FrontServlet</i> is the "front end" of the framework and it normally receives all browser input. The FrontServlet takes the rest of the parameters from the URL&#160;and constructs the proper command, or <b>target servlet</b>, to run. With rare exceptions, the target servlet will either be a servlet found in the <i>com.agencyport.servlets.base</i> package or in the "user supplied"&#160;packaged for this transaction.</p>
        <p>In this example, the generated target servlet will be the following:</p>
        <p><code>com.agencyport.servlets.wcomp.CMDDisplaygenInfo</code>
        </p>
        <p>This is the name of a Java class. FrontServlet then does a lookup to see if this command should actually be handled by a base servlet (a built-in servlet) or if the name represents a user supplied servlet (the base class needed to be extended for some reason).</p>
        <p>The parameter FIRST_TIME=true is a special framework parameter required when invoking the first page of an application (transaction) for the first time. After the framework locates the correct servlet, it executes and the first page of the application displays. At a high level, the framework servlet for the first page of an application does the following:</p>
        <ul>
            <li value="1">validates the user is logged on</li>
            <li value="2">creates a new work_item id</li>
            <li value="3">creates the menu control file for the work item</li>
            <li value="4">obtains and forwards the page object to dynamicpage.jsp, which generates the HTML that shows up on the user's browser</li>
        </ul>
        <p>Assume that the user fills in some data on this first page and presses submit. The HTML for that first page contains a hidden field - PAGE_NAME - that contains the name found in the TDF for the page. </p>
        <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">&lt;transaction title="Workers Compensation" target="WorkCompPolicyQuoteInqRq"&gt;
&lt;page id="generalInfo" title="General Information" type="dataEntry"&gt;</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>When the user submits the HTML from the FrontServlet, the framework will use the name generalInfo to manufacture the target servlet name.</p>
        <p>The target servlet will process the data. A servlet is automatically "wired" by the framework to a class named DataManager. This class directs the movement of data into and out of the physical data store. By default, the store is an APDataCollection whose contents are written as a BLOB to a database server. APDataCollection is a wrapper class around an XML structure. A very high level overview of the data management component is as follows:</p>
        <ul>
            <li value="1">The framework's properties file contains an entry(ies) that names the data schema(s) to use for storing the data. The schemas are loaded at startup time.</li>
            <li value="2">The transaction definition file names one of the schemas listed in the properties file as the target for the data.</li>
            <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
                <col class="TableStyle-Example_Table-Column-Column1" />
                <tbody>
                    <tr class="TableStyle-Example_Table-Body-Body1">
                        <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                            <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">&lt;transaction title="Watercraft" target="WatercraftPolicyRequest"/&gt;</p></pre>
                        </td>
                    </tr>
                </tbody>
            </table>
        </ul>
        <p>The syntax employed in a page definition provides the mapping between the HTML filed and the target field in the data store. If, on the HTML page there, is a text box labeled "Carrier Name"&#160;and the contents of the text box are to be stored in the XML element given by the path WatercraftPolicyRequest &gt;&#160;PriorPolicy &gt; Carrier, the definition for the HTML field would look like the following:</p>
        <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p><pre class="prettyprint"><p class="example">&lt;fieldElement type="text" id="PriorPolicy.Carrier" label="Carrier Name" … /&gt;</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Note Table.css');" class="TableStyle-Note_Table" cellspacing="0">
            <col class="TableStyle-Note_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Note_Table-Body-Body1">
                    <td class="TableStyle-Note_Table-BodyA-Column1-Body1">
                        <p class="noteheader">NOTE:</p>
                        <p class="note">Since WatercraftPolicyRequest is the parent of all elements in the document, it only needs to be specified once and not per fieldElement.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>Finally, after the data has been stored away, the servlet updates the Menu Control file to indicate this page has been "visited" and can thus be "jumped to" via the Menu bar. It then determines the next page to display and forwards that information to the FrontServlet.</p>
        <p>If the page must perform additional tasks besides data entry, there are two mechanisms available:</p>
        <ul>
            <li value="1">serve "plug-ins"</li>
            <li value="2">overriding default base class behavior with a custom class</li>
        </ul>
        <p>Service "plug-ins" are typically used to accomplish tasks such as the following:</p>
        <ul>
            <li value="1">business rules</li>
            <li value="2">rating (quoting)</li>
        </ul>
        <p>These services are specified and associated with pages via an external file. The default name of this file is <code>connectorConfigFile.xml</code>.</p>
        <p>Developers create connectors to services, following a lightweight specification that allows the framework to automatically call any connectors configured for a page.</p>
        <h2>Change Management</h2>
        <p>AgencyPortal framework provides support for change management transactions by way of the Change Management Engine. Refer to XX&#160;for more information on this component.</p>
        <p>The change management infrastructure included with AgencyPortal provides additional user experience elements to simplify the process of making changes to existing policy data and implements an industry standard mechanism for representing change requests in the form of the ACORD&#160;ModInfo aggregate.</p>
        <h2>Roster Delete</h2>
        <p>In framework versions of the 3.4 and newer, connectors are run on the delete action of a roster. This change also included the move of the delete functionality on APDataCollection data from the DataManager.executeDelete to the DataManager.executeDataStagingForDelete(). This could have an impact on any custom delete code that needs to occur before the SDK data engine performs the delete operation itself that was previously contained within a custom override of the <b>APCommand.executeCustomUpdateDataAccess() method</b>. It will need to be moved either to a custom override of the <b>APCommand.executeCustomDataStaging()</b> or, more preferably, to adopt the use of the conformant special field helper facility that would not require you to override APCommand at all for certain scenarios.</p>
        <h3>Conformant Special Field Helpers</h3>
        <p>Refer to&#160;<span style="color: #ff0000;">XX&#160;</span>on packaging your custom code in special field helpers and reducing the number of APCommands you must perform.</p>
        <h3>Conformant Custom Lists</h3>
        <p>Conformant custom list generation is directly supported.&#160;Refer to <span style="color: #ff0000;">XX </span>for more information.</p>
        <h3>Built-in Field Validation</h3>
        <p>The AgencyPortal framework includes a field validation sub-system driven by TDF configuration; thereby, eliminating the need to program many field validations in a rules engine. Refer to <span style="color: #ff0000;">XX&#160;</span>for more information on this sub-system.</p>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>