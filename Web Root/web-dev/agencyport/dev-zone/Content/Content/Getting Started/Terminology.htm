<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Getting Started">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Terminology</title>
        <link href="../../Resources/TableStyles/Basic Table Type.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../Default.htm#Content/Getting Started/Terminology.htm">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="Getting Started.htm">Getting Started</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Terminology</span>
        </div>
        <h1>Terminology</h1>
        <p>The following key terms are central to development at Agencyport and are used frequently throughout documentation. Review these terms to get familiar with our terminology before getting started with the installation process.</p>
        <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" style="width: 842px;" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <th style="text-align: left;" class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1">Term</th>
                    <th style="text-align: left;" class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Definition</th>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Agencyport XML&#160;Engine (AXE)</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The Agencyport XML Engine (AXE) is used to describe the components of the framework developed to manage the complexities of working with ACORD&#160;XML&#160;as a data format.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Aggregates</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The term aggregate is used to describe a set of XML nodes that exist as a group and is reused in multiple places within the schema. ACORD uses the term extensively.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">APDataCollection</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">APDataCollection is a term used to describe the ACORD XML business data instance. The term APDataCollection is used in two contexts. APDataCollection refers to a JDOM&#160;based XML object that is wrapped by the class APDataCollection; in this content it "is" the application data.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Base Classes</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The SDK&#160;associates pre-built base classes with each of the page types. In normal situations, the base classes can fully process the page type. The base classes are designed for extension to handle special situations.&#160;These classes are also often referred to as commands.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Behavior</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A behavior describes to the DTR subsystem the nature of a specific dynamic alteration.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">CLOB/BLOB</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The default physical storage mechanism employed by the SDK is to store the data as a CLOB (Character Large Object) or BLOB&#160;(Binary Large Object) in a database. In databases where support is provided, XML column types are used in place of the CLOB&#160;or BLOB types.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Change Management Engine</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The Agencyport framework provides support for change management transactions (endorsements, renewals, etc) by way of the change management engine. The change management infrastructure included with AgencyPortal provides additional user experience elements to simplify the process of making changes to existing policy data and implements an industry standard mechanism for representing change requests in the form of the ACORD&#160;ModInfo aggregate.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Codelists</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Codelist files contain one or more sets of name/value pairs used by the application.&#160;Codelist files can be used to drive the values of fieldElements selectlists, filterlists and radio buttons.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Commands</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The SDK&#160;associates pre-built commands with each of the page types. In normal situations, the base classes can fully process the page type.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Compound Key</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The mechanism used to identify a page entity to DTRl. The format of a compound key is XPath like. It follows the following format: <i>Transaction id/Page id/ Page Element Id/Field Element id</i>.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Connectors</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Connectors are the mechanism by which the framework integrates with third party services or the way to apply business specific logic.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Custom Page</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A type of page used to implement a custom JSP. Typically, custom JSP&#160;pages are used only to implement quote results and submission summary pages, and are not used for data collection.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Data Entry</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A type of page used to collect basic non-repeating data. For example, 'general information' might be collected on a data entry page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Data Schema</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The data schema file describes the data store. The data schema is an XSD&#160;file.&#160;The data elements transferred to/from the physical data store and the HTML pages are in a sense managed by this schema. The default schemas are defined by ACORD, one of the primary developers of insurance standards (refer to XX). In general each line of business has a specific schema (entities common across lines of business are of course shared). The HTML element names found in the TDF "map" directly to the element names found in the data schema, and are thus ACORD&#160;standard data field names. The effort saving and speed to market advantages of utilizing an ACORD&#160;foundation are considerable: the logical data model is already defined, ACORD&#160;provides an extensive off-the-shelf data dictionary, defining all the data fields and re-using is heavily promoted by standardization; there is little rational for analysts or developers to "reinvent the wheel" as each new line of business comes along.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Debug Console</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The AgencyPortal debug console is designed as a development aide and provides useful information about the application. The debug console is made up of panels, each of which provides a piece of functionality.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Display</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The term display-side and process-side (or simply display and process) refer, respectively, to the logic necessary to display a page to the user and to process any data entered on a page after the page has been submitted.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Display-Side</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The terms display-side and process-side (or simple display and process) refer, respectively, to the logic necessary to display a page to the user and to process any data entered on a page after the page has been submitted.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Dynamic Transaction Rendering (DTR)</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The term Dynamic Transaction&#160;Rendering (DTR) is used to describe the components in the application that make a transaction dynamic by dropping, adding or altering page entities. DTR&#160;is implemented through behaviors.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">FieldElement</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A fieldElement is a TDF&#160;representation of a single application field.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Framework</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The core software components that comprise AgencyPortal. Often used interchangeably with SDK.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Front Servlet</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The Front Controller Pattern centralizes request logic by presenting a single point of entry for the web application. A front controller typically consists of a request handler and a catalog of dynamically invoked commands that process the web request.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Hot field</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A predetermined, targeted field on a page whose state change triggers an event that could result in a change to the current page's composition.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">HTMLDataContainer</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The term HTMLDATAContainer is used to describe the collection of data coming off a single page. This container is instantiated on the process-side only.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Interest Level</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A message sent to the page subsystem from the transaction definition provider that instructs the page subsystem whether to include, exclude or alter a TDF page entity.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">IntraPage DTR</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">DTR as it applies to a page governed by page entities on that same page. Changing the composition of a web page in reaction to a change that the user has applies to one of the fields on that page itself. Intra-page DTR can apply to both data entry and roster based SDK pages.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Indexed based DTR</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The application of index management to the preconditions subsystem in order to accommodate the variance of page composition across roster entries for a given roster page.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Origin hot field</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The hot field that triggers an event to re-render the composition of a page. Although there can be multiple hot fields associated with a page, there is one and only one hot field that triggers the specific event at a single time.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Page</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The content displayed in the user's browser window is referred to in this document simply as a page. There are a small number of supported page types in the framework, including data entry (used for basic non-repeating data entry pages), roster (used in the case where a repeating group is being collected) or page display (in the case where a custom JDP page is required). Typically, custom&#160;JSP&#160;pages are used only to implement quote results and submission summary pages.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Page Entity</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A TDF&#160;is comprised of page entities. Examples of page entities include the page, pageElement and fieldElement physical entities. A page entity is a general term that can be used to refer to one of the aforementioned physical entities.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Page Libraries</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Common pages can be defined in files called page libraries. Pages defined in page libraries can be reused across transactions or even within a single transaction for applications that support interstate.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">PageElement</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A pageElement is a page entity in the TDF and is a way to group items within a page. pageElements contain individual fieldElements and are used to create fieldsets, rosters, questionnaires, etc within the application.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Precondition</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A condition that is discovered before the first page of a transaction is displayed.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Process</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The terms display-side and process-side (or simply display and process) refer, respectively, to the logic necessary to display a page to the user and to process any data entered on a page after the page has been submitted.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Process-Side</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The terms display-side and process-side (or simply display and process) refer, respectively, to the logic necessary to display a page to the user and to process any data entered on a page after the page has been submitted.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Roster</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A special type of page used to collect repeating data. For example, a list of workers compensation class codes might be collected in a roster.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">SDK</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The core software components that comprise AgencyPortal and the software development kit that is used to implement them. Often used interchangeably with framework.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Special Field Helpers</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The SpecialFieldHelper is designed to provide some structure around fields whose update / retrieval rules are too complex to be handled by the SDK's own data management service. The main difference between a special field helper and a regular field defined in a TDF&#160;is that fields with associated special field helpers are invoked all together at a specific point in the processing either before or after the SDK's own data management service has serviced "regular" fields.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Submission Navigation Menu</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The term submission navigation menu is used to describe the left hand menu presented to the user within a transaction.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Transaction</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A series of pages is termed a transaction. The notion of a transaction is central to AgencyPortal and it defines a unit of work for the end user. For example, a personal auto new business application is implemented as a transaction.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Transaction Definition File (TDF)</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The term transaction definition file (TDF) refers to an XML file that describes the content of each of the pages in the traversal (the "screen flow"). The TDF, while page specific in nature, can be thought of as the driving force behind the web application and, in a sense, the framework as well. The term transaction, therefore, refers (depending on the context) either to the series of pages making up the web application or a web application know to and "functioning" within the framework.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Transaction Definition Provider</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A DTR support module responsible for returning interest level messages to the page subsystem for specific page entities and carrying out alteration / modification upon those page entities it desires to alter.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Transaction Definition Behavior Repository</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A collection of behavior meta data files that relates how interest levels and alterations apply to a set of page entities under various preconditions/conditions.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Views</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Views are used to support complex data relationships when there is not a one-to-one relationship between a field on the screen and a target in the data store.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Work in Progress (WIP) </td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">The work in progress queue is a screen that displays a list of work items that are currently active for a given user and often gives them the ability to open, delete or, otherwise, manage any given item.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">Work Item</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">A single, unique submission and the primary unit of work in AgencyPortal. A work item can typically be thought of as an individual insurance application. Many work items may exist for a given customer if they have multiple active quotes or have applications in progress for a variety of lines of business. Examples of a work item include an individual quick quote, new business or endorsement submission.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1" style="font-weight: bold;">XML&#160;Column</td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">In databases where support is provided, XML column types are used to store the XML application data.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1" style="font-weight: bold;">XQuery</td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">In RDBMS where support is provided for it, XQuery is used to query and report against data in the data store.</td>
                </tr>
            </tbody>
        </table>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>