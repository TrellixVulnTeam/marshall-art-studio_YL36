<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Miscellaneous Enhancements and Performance Improvements</title>
        <link href="../../../Resources/TableStyles/Example Table.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/Basic Table Type.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/Note Table.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/NewStylesheet.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/left-arrow.png') no-repeat center center;
}

.button.current-topic-index-button
{
	-pie-background: linear-gradient(#ffffff, #ffffff);
}

.button.next-topic-button
{
	-pie-background: #f7f7f8 url('file://vmware-host/Shared Folders/Documents/My Projects/AgencyPortal 5.0/Output/Jami_Delia/Online Output/Website Output/Skins/Default/Stylesheets/Images/right-arrow.png') no-repeat center center;
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE.htc');
}

</style>
        <script src="../../Resources/prettify/run_prettify.js">
        </script>
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../Default.htm#Content/xxx/Misc Enhancements and Performance Improvements/Miscellaneous Enhancements and Performance Improvements.htm">Open topic with navigation</a>
        </p>
        <h1>Miscellaneous Enhancements and Performance Improvements</h1>
        <h2>Faster XML Parsing</h2>
        <p>Under heavy load, the demand for JAXP SAX parsers is very high. Up until 5.0, the standard practice for parsing an XML stream into a DOM instance used the following JDOM code:</p><pre class="prettyprint" xml:space="preserve">
                   SAXBuilder saxBuilder = new SAXBuilder();
                   try {
                         return saxBuilder.build(inputStream);
                  } catch (IOException exception) {
                         throw new APException(exception);
                  }</pre>
        <p>This code seems harmless in and of itself; however, when there is a high demand for many SAXBuilder instances, they are created (new SAXBuilder) across many threads at the same time a concurrency locking situation arises down in the core of the JAXP implementation causing a bottleneck. This situation was discovered in our own performance testing at Agencyport, but was also brought to our attention by one of our customers. To address this situation, a SAXBuilder object pool was created. Everywhere in the framework where a SAXBuilder is needed, instead of creating a new instance, the following logic is used:</p><pre class="prettyprint"><p>
          import com.agencyport.xml.JDOMFactory;
                   SAXBuilder saxBuilder = JDOMFactory.get().reserveSAXBuilder();
                   try {
                         return saxBuilder.build(inputStream);
                  } catch (IOException exception) {
                         throw new APException(exception);
                  } finally {
                        JDOMFactory.get().unreserveSAXBuilder(saxBuilder);
                  }</p></pre>
        <p>Custom application logic should be enhanced to use this technique as well. The importance of the final block approach cannot be overstated. If you need a SAXParser to validate, there is a different set of APIs on the JDOMFactory class that must be used for reserving and then unreserving the SAX&#160;builder instances.</p><pre class="prettyprint"><p>reserveValidatingSAXBuilder()
unreserveValidatingSAXBuilder()</p></pre>
        <p>The default pool size is 10 instances. If demand goes beyond that, then new instances are created on the fly and returned; they will not be pooled. If you need to alter the default pool size of 10, then the following application property can be configured:</p><pre class="prettyprint"><p>SAXBuilder.Pool.max_pool_size=nnn
Where nnn is a positive integer </p></pre>
        <p>Testing has verified that under heavy demand for SAXBuilder instances, the object pool approach does pay off. Product development has carried out JUNIT testing that compares the use of JDOMFactory with the traditional new SAXBuilder() approach. Each test spins up 25 concurrent threads, each thread parsing the same XML stream 100 iterations (total 2500 parsed documents resulting) using the default object pool size of 10. The following information is notable:</p><pre class="prettyprint"><p>       @Test
      public void testJDOMFactoryEfficiency() {
             try {
                   // Load classes on both sides for a fairer test
                  runThreads( false, 1, 1);
                  runThreads( true, 1, 1);
                   long timeForSAXBuilders = runThreads( false, NUM_THREADS, NUM_ITERATIONS );
                   long timeForJDOMFactory = runThreads( true, NUM_THREADS, NUM_ITERATIONS );
                  Assert. assertTrue("Time for JDOM Factory based parsing was more inefficient than using new SAX Builders", timeForJDOMFactory &lt; timeForSAXBuilders);
                  System. out.println( "Time in ms using new SAX Builders = " +  timeForSAXBuilders);
                  System. out.println( "Time in ms using Pooled SAX Builders = " +  timeForJDOMFactory);
                  
            } catch (Exception exception){
                  exception.printStackTrace();
            }
      }
</p></pre>
        <p>Time in ms using new SAX Builders = 1816</p>
        <p>Time in ms using Pooled SAX Builders = 498</p>
        <p><code>Apr 28, 2014 10:55:13 AM com.agencyport.shutdown.ApplicationShutdownOfficer shutdown</code>
        </p>
        <p><code>INFO: Releasing resources associated with resource destroyer: 'com.agencyport.xml.JDOMFactory'</code>
        </p>
        <p><code>Apr 28, 2014 10:55:13 AM com.agencyport.pool.ObjectPool release</code>
        </p>
        <p><code>INFO: Statistics for object pool: hash(228893339), Pool key: 1, Max pool size: 10, Current pool size: 10, Number of reserve requests: 2501, Number of unreserve requests: 2501, Number of pooled objects created: 10, Number of transient objects created: 255, Number of times pooled objects reused: 2236, Cache Hit Ratio: 89.40423830467813%</code>
        </p>
        <h2>Product Definition Memory Conservation</h2>
        <p>Under 3.x/4.x, all product definitions were held in memory for the entire scope of the application.</p>
        <p>5.x leverages the same MRU caching/serialization mechanism that was introduced for optimizing XML&#160;schemas under 4.x for selected product definitions. The folder location for the serialized product definition files defaults to <b>&lt;application context&gt;/WEB-INF/cache</b>, which is fine for testing and production environments. Certain development environments under Eclipse assume that the application server runtime context is a carbon copy of the source project folder structure in Eclipse and may delete the <b>&lt;application context&gt;/WEB-INF/cache</b> folder dynamically causing runtime issues during development.</p>
        <p>It is highlight recommended that you configure both your production definition cache and XML&#160;schema cache directories outside of the application context. This can be configured using application properties. The product definition cache folder's name and location can be altered by using an application property call <b>cache_directory</b> while the XML schema cache folder's name or location can be altered by using an application property called <b>schema_cache_directory</b>.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Note Table.css');" class="TableStyle-Note_Table" cellspacing="0">
            <col class="TableStyle-Note_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Note_Table-Body-Body1">
                    <td class="TableStyle-Note_Table-BodyA-Column1-Body1">
                        <p class="noteheader">NOTE:</p>
                        <p class="note">Both the product definition and XML schema cache folders are rebuilt at application bootstrap time. The contents of either folder is not carried from one application session to the next.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p>
                        <p class="example">The following is an example of overriding the product definition and XML schema cache folders:</p><pre class="prettyprint"><p class="example">output_dir=/runtime/AgencyPortal/</p><p class="example">cache_directory=${output_dir}cache</p><p class="example">schema_cache_directory=${output_dir}schema_cache</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Improved Access to Work Item / Account Data</h2>
        <p>5.0 introduced a new mechanism for getting access to the current <b>IWorkItem</b> instance and its associated <b>APDataCollection</b> instance, as well as to some other key entities. The mechanism should eliminate redundant fetches of the work item in flight from the database by the framework and the application. It leverages the same thread local storage technique that several other facets of the framework utilizes, thereby making the work item easily accessible anywhere precluding the need to pass explicit references everywhere. In most cases, the framework will have loaded the work item in flight by the time any application logic is engaged.</p>
        <p>The following items are made available by the <b>WorkItemContext</b> class:</p>
        <ol>
            <li value="1"><b>IWorkItem</b> instance for the work item that is in flight.</li>
            <li value="2"><b>Transaction</b> instance for the transaction that is in flight.</li>
            <li value="3"><b>APDataCollection</b> instance for the work item XML that is in flight.</li>
            <li value="4"><b>HTMLDataContainer</b> instance for the HTML&#160;data container that is in flight. This is only available on the process side during the time the framework data engine is active [while <b>CollectionProcess.updateCollection()</b> is running]. In fact, this facility allows custom view (implementations of <b>IView</b>) logic to gain access to current request data.</li>
        </ol>
        <p>The <b>WorkItemContextStore</b> class is the framework class that manages work item context on thread local storage. All public methods are static. The following are salient:</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Basic Table Type.css');" class="TableStyle-Basic_Table_Type" cellspacing="0">
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <col class="TableStyle-Basic_Table_Type-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1"><b>isPresent</b>
                    </td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Determines whether a work item context has been associated with the current thread.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1"><b>get</b>
                    </td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Returns the work item context instance.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyE-Column1-Body1"><b>clearWorkItemContext</b>
                    </td>
                    <td class="TableStyle-Basic_Table_Type-BodyD-Column1-Body1">Clears the work item context instance from thread.</td>
                </tr>
                <tr class="TableStyle-Basic_Table_Type-Body-Body1">
                    <td class="TableStyle-Basic_Table_Type-BodyB-Column1-Body1"><b>load</b>
                    </td>
                    <td class="TableStyle-Basic_Table_Type-BodyA-Column1-Body1">
                        <p>Checks first to see if there is a work item context. If so, verifies the work item ID matches the one passed in. </p>
                        <p>If either of these tests fail, the work item and the APDataCollection are fetched from the database and loaded into the current work item context and set on the thread.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/Example Table.css');" class="TableStyle-Example_Table" cellspacing="0">
            <col class="TableStyle-Example_Table-Column-Column1" />
            <tbody>
                <tr class="TableStyle-Example_Table-Body-Body1">
                    <td class="TableStyle-Example_Table-BodyA-Column1-Body1">
                        <p class="exampleheader">EXAMPLE:</p>
                        <p class="example">The following is an example of its usage:</p><pre class="prettyprint"><p class="example">IWorkItem currentWorkItem = WorkItemContextStore.get().getWorkItem();</p><p class="example">APDataCollection currentXML = currentWorkItem.getDataCollection; OR WorkItemContextStore.get().getDataCollection();</p><p class="example">Transaction currentTransaction = WorkItemContextStore.get().getTransaction();</p></pre>
                        <p class="example">A custom view (snipped from <b>OtherThanCollisionCoverageView</b> from the 5.0 AUTOB Template) using access to <b>HTMLDataContainer</b> in order to determine which field set to apply to the APDataCollection for the in flight update operation.</p><pre class="prettyprint"><p class="example">
      /**
       * {@inheritDoc}
       */
      @Override
      public void update(APDataCollection apData, int[] indices, String value, String associatedElementPath){
             if (associatedElementPath.contains( "Deductible")){
                  handleDeductibleAmountUpdate(apData, indices, value);
            }
             else {
                   super.update(apData, indices, value, associatedElementPath);
            }
      }
      /**
       * Updates the deductible amount.
       * @param apData is the data collection in context.
       * @param indices are the indices to apply to the data collection.
       * @param value is the value to apply to the data collection.
       */
      private void handleDeductibleAmountUpdate(APDataCollection apData, int[] indices, String value){
             if (StringUtilities. isEmptyOnTrim(value)){
                   return;      // deletion of parent aggregate assumed to be handled by the call into this view for the coverage code and not the delete element
            }
             // Look up the coverage code value from the HTML data container
            HTMLDataContainer htmlDataContainer = WorkItemContextStore.get().getHtmlDataContainer() ;
             if (htmlDataContainer == null){
                   throw new IllegalStateException( "HTML data container missing from work item context store but is needed by this view.");
            }
            String htmlCoverageCodeValue = htmlDataContainer.getStringValue(htmlCoverageCodeFieldId , null);
             if (StringUtilities. isEmptyOnTrim(htmlCoverageCodeValue)){
                   return;      // no update needed
            }
             int fieldSetIndex = this.determineFieldSetFromInputValue(htmlCoverageCodeValue);
             deductibleFieldsets[fieldSetIndex].update(apData, indices, value);
      }
</p></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Configuring JVM ENV Property</h3>
        <p>A new web.xml init parameter is introduced with the name of ENV_ID that is recognized by the framework's initializer servlet. The value of this parameter identifies the application's environment conveyed by way of the JVM system property identifier as in <b>-D&lt;carrier specific env id&gt;</b>. The initializer servlet takes the carrier specific env system property value and overwrites an existing value stored by the <b>agencyport.env</b> system property; thereby, allowing applications to use their own system property for environment identification. This will affect both the integration kit and apbase version of the environment resource provider implementations.</p><pre class="prettyprint">&lt;init-param&gt;        
		&lt;param-name&gt;ENV_ID&lt;/param-name&gt;        
		&lt;param-value&gt;carrier.env&lt;/param-value&gt;
&lt;/init-param&gt;</pre>
        <div class="buttons inline-buttons clearfix topicToolbarProxy" style="mc-topic-toolbar-items: ;">
            <div class="button-group-container-left">
                <button class="button needs-pie previous-topic-button" type="button" title="Navigate previous">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                </button>
                <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                <button class="button needs-pie next-topic-button" type="button" title="Navigate next">
                    <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                </button>
            </div>
        </div>
    </body>
</html>